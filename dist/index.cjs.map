{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export const KEY = \"streak\";\nexport interface Streak {\n  currentCount: number;\n  startDate: string;\n  lastLoginDate: string;\n}\n\nexport function formattedDate(date: Date): string {\n  return date.toLocaleDateString(\"en-US\");\n}\n\nexport function buildStreak(\n  date: Date,\n  overrideDefaults?: Partial<Streak>\n): Streak {\n  const defaultStreak = {\n    currentCount: 1,\n    startDate: formattedDate(date),\n    lastLoginDate: formattedDate(date),\n  };\n\n  return {\n    ...defaultStreak,\n    ...overrideDefaults,\n  };\n}\n\nexport function updateStreak(storage: Storage, streak: Streak): void {\n  storage.setItem(KEY, JSON.stringify(streak));\n}\n","import { buildStreak, Streak, updateStreak } from \"./utils\";\nimport { KEY, formattedDate } from \"./utils\";\n\nfunction shouldIncrementOrResetStreakCount(\n  currentDate: Date,\n  lastLoginDate: string\n): \"increment\" | \"reset\" | \"none\" {\n  // We get 11/5/2021\n  // so to get 5, we split on / and get the second item\n  const difference =\n    currentDate.getDate() - parseInt(lastLoginDate.split(\"/\")[1]);\n\n  // Same day login, do nothing\n  if (difference === 0) return \"none\";\n\n  // This means they logged in the day after the currentDate\n  if (difference === 1) {\n    return \"increment\";\n  }\n  // Otherwise they logged in after a day, which would\n  // break the streak\n  return \"reset\";\n}\n\nexport function streakCounter(storage: Storage, date: Date): Streak {\n  const streakInLocalStorage = storage.getItem(KEY);\n  if (streakInLocalStorage) {\n    try {\n      const streak = JSON.parse(streakInLocalStorage) as Streak;\n      const state = shouldIncrementOrResetStreakCount(\n        date,\n        streak.lastLoginDate\n      );\n      const SHOULD_INCREMENT = state === \"increment\";\n      const SHOULD_RESET = state === \"reset\";\n\n      if (SHOULD_INCREMENT) {\n        const updatedStreak = buildStreak(date, {\n          startDate: streak.startDate,\n          currentCount: streak.currentCount + 1,\n          lastLoginDate: formattedDate(date),\n        });\n\n        updateStreak(storage, updatedStreak);\n\n        return updatedStreak;\n      }\n      if (SHOULD_RESET) {\n        const updatedStreak = buildStreak(date);\n\n        updateStreak(storage, updatedStreak);\n\n        return updatedStreak;\n      }\n\n      return streak;\n    } catch (error) {\n      console.error(\"Failed to parse stream from localStorage\");\n    }\n  }\n\n  const streak = buildStreak(date);\n\n  storage.setItem(KEY, JSON.stringify(streak));\n\n  return streak;\n}\n"],"names":["KEY","formattedDate","date","toLocaleDateString","buildStreak","overrideDefaults","_extends","currentCount","startDate","lastLoginDate","updateStreak","storage","streak","setItem","JSON","stringify","difference","streakInLocalStorage","getItem","parse","state","getDate","parseInt","split","SHOULD_RESET","updatedStreak","error","console"],"mappings":"oNAAaA,EAAM,SAOHC,SAAAA,EAAcC,GAC5B,OAAOA,EAAKC,mBAAmB,SAGjB,SAAAC,EACdF,EACAG,GAQA,OAAAC,EAAA,GANsB,CACpBC,aAAc,EACdC,UAAWP,EAAcC,GACzBO,cAAeR,EAAcC,IAK1BG,GAISK,SAAAA,EAAaC,EAAkBC,GAC7CD,EAAQE,QAAQb,EAAKc,KAAKC,UAAUH,0BCJtB,SAAcD,EAAkBT,GAC9C,IApBAO,EAIMO,EAgBAC,EAAuBN,EAAQO,QAAQlB,GAC7C,GAAIiB,EACF,IACE,IAAML,EAASE,KAAKK,MAAMF,GACpBG,GAxBVX,EA0BMG,EAAOH,cAlBM,IAJbO,EAqBAd,EApBQmB,UAAYC,SAASb,EAAcc,MAAM,KAAK,KAG/B,OAGV,IAAfP,EACK,YAIF,SAaGQ,EAAyB,UAAVJ,EAErB,GAHmC,cAAVA,EAGH,CACpB,IAAMK,EAAgBrB,EAAYF,EAAM,CACtCM,UAAWI,EAAOJ,UAClBD,aAAcK,EAAOL,aAAe,EACpCE,cAAeR,EAAcC,KAK/B,OAFAQ,EAAaC,EAASc,GAEfA,EAET,GAAID,EAAc,CAChB,IAAMC,EAAgBrB,EAAYF,GAIlC,OAFAQ,EAAaC,EAASc,GAEfA,EAGT,OAAOb,EACP,MAAOc,GACPC,QAAQD,MAAM,4CAIlB,IAAMd,EAASR,EAAYF,GAI3B,OAFAS,EAAQE,QAAQb,EAAKc,KAAKC,UAAUH,IAE7BA"}